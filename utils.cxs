Import mojo
Import darkMatterInGalaxy


'------------------------------------------------'
'--------- Computation of the delta time --------'
'------------------------------------------------'
Class DeltaTimer
	Global updateRate:Int 
	Global lastTime:Int
	Global delta:Float   ' The difference of time since last frame in seconds
	Global factor:Float
	Global fps:Int
	Global fpsCounter:Int
	Global lastTimeFps:Int
	global debugCounter:Int = 0

	Function Init:Void(rate:Int)
		updateRate = rate
		lastTime = Millisecs()
		lastTimeFps = Millisecs()
		fps = 0
		fpsCounter = 0
	End Function


	Function Update:Void()
		debugCounter = debugCounter + 1
		Local time:Int = Millisecs()
		delta = (time - lastTime) / 1000.0
		factor = delta * updateRate
		lastTime = time
		' Compute FPS
		fpsCounter = fpsCounter + 1
		If (time - lastTimeFps > 1000) Then
			fps = fpsCounter
			fpsCounter = 0
			lastTimeFps = time
		Endif
	End Function
End



'------------------------------------------------'
'-------------------- The slider ----------------'
'------------------------------------------------'
Function Slider:Int(xl:Int = DeviceWidth() / 2, yl:Int = DeviceHeight() / 2, Lenght:Int = 100, Width:Int = 20, TrackedValue:Int, SliderImage:Image = Null, Type:Int = 0)
	Local Percent:Int = Lenght * TrackedValue / 100
	SetBlend 0
	Select Type
		Case 0
			SetColor 255, 255, 255
			DrawRect(xl - 2, yl + Width / 2 - 2, Lenght + 4, 6)
			SetColor 000, 000, 000
			DrawRect(xl, yl + Width / 2, Lenght, 2)
		Case 1
			'SetColor 50, 50, 160
			SetColor 47, 47, 67
			DrawRect(xl - 5, yl - 5, Lenght + 10, Width + 10)
			'SetColor 50, 50, 100
			SetColor 70, 70, 100
			DrawRect(xl, yl, Lenght, Width)
			'SetColor 50, 50, 230
			SetColor 111, 134, 221
			For Local YW:Int = 1 To Width
				DrawLine(xl, yl + YW, xl + Percent, yl + YW)
			Next
		Case 2
			'SetColor 60, 60, 60
			SetColor 47, 47, 67
			DrawRect(xl - 2, yl + Width / 2 - 2, Lenght + 4, 10)
			'SetColor 100, 100, 100
			SetColor 70, 70, 100
			DrawRect(xl, yl + Width / 2, Lenght, 6)
			'SetColor 200, 200, 200
			'SetColor 180, 229, 244
			SetColor 181, 192, 238	
			DrawRect(xl, yl + Width / 2, Percent, 6)
	End Select
	If Type = 1  Return
	
	'SetColor 64, 162, 64
	'DrawRect(xl - 3 + Percent, yl, 6, Width)
	'SetColor 60, 60, 60
	SetColor 47, 47, 67
	DrawCircle(xl + Percent, yl + Width/2, Width*2.0/2)
	'SetColor 200, 200, 200
	SetColor 180, 229, 244
	SetColor 181, 192, 238	
	DrawCircle(xl + Percent, yl + Width/2, Width*1.8/2)
	If SliderImage <> Null Then DrawImage SliderImage, xl + Percent, yl + Width / 2
	If TouchX() > xl And TouchX() < xl + Lenght
		If TouchY() > yl And TouchY() < yl + Width
			If TouchDown()
				TrackedValue = (TouchX() -xl) / Lenght * 100
			Endif
		Endif
	Endif
	If TrackedValue > 100 Then TrackedValue = 99
	'If TrackedValue = 99 Then TrackedValue = 100
	If TrackedValue < 0 Then TrackedValue = 0
	Local scaleText:Float = 1.0
	DrawTextFont(font2, loc.GetSentence(3) + TrackedValue + loc.GetSentence(4), xl - 240, yl - 10, scaleText)
	Return TrackedValue
End Function



'------------------------------------------------'
'-------------- Check box -----------------------'
'------------------------------------------------'
Class CheckBox
	Field label:String
	Field x:Int
	Field y:Int
	Field checked:Bool
	Field justClicked:Bool
	Field visible:Bool
	Field checkmarkImage:Image
	Field checkboxImage:Image
	Field scaleImages:Float = 0.3
	
	Method New(label:String, x:Int, y:Int)
		Self.label = label
		Self.x = x
		Self.y = y
		checked = False
		justClicked = False
		visible = True
		checkmarkImage = LoadImage("checkmark.png", 1, Image.MidHandle)
		checkboxImage = LoadImage("checkbox.png", 1, Image.MidHandle)
	End Method
	
	
	Method Check(flag:Bool)
		checked = flag
	End Method
	
	
	Method isChecked:Bool()
		Return checked
	End Method
	
	
	Method SetVisible(visible:Bool)
		Self.visible = visible
	End Method
	
	
	Method JustClicked:Bool()
		If justClicked Then
			justClicked = False
			Return True
		Endif
		Return False
	End Method
	
	
	Method Update()
		If Not visible  Return
		If CheckButtonTouched(x, y, checkboxImage.Width()*scaleImages, checkboxImage.Height()*scaleImages) Then 
			checked = Not checked
			justClicked = True
		Endif
	End Method
	
		
	Method Draw()
		If Not visible  Return
		DrawImage(checkboxImage, x, y, 0, scaleImages, scaleImages)
		If (checked)  DrawImage(checkmarkImage, x, y, 0, scaleImages, scaleImages)
		Local scaleText:Float = 1.0
		DrawTextFont(font2, label, x + 25, y, scaleText, False, True)
	End Method
End Class



'------------------------------------------------'
'-------------- Test button----------------------'
'------------------------------------------------'
Function CheckButtonTouched:Bool(x:Int, y:Int, sizeX:Int, sizeY:Int)
	If (TouchX() > x - sizeX/2 And TouchX() < x + sizeX/2) Then
		If (TouchY() > y - sizeY/2 And TouchY() < y + sizeY/2) Then
			If (TouchHit()) Then
				Return True
			Endif
		Endif
	Endif
	Return False
End Function



'------------------------------------------------'
'---------- Draw text with fonts ----------------'
'------------------------------------------------'
Function DrawTextFont(font:BitmapFont, text:String, x:Int, y:Int, scale:Float = 1.0, centerX:Bool = False, centerY:Bool = False, alpha:Float = 1.0)
	' First alignment
	Local centerXOption:Int = eDrawAlign.LEFT
	If (centerX)  centerXOption = eDrawAlign.CENTER 
	Local centerYOption:Int = 0
	If (centerY)  centerYOption = font.GetFontHeight/2

	SetBlend AlphaBlend
	SetAlpha alpha
	SetColor 255, 255, 255
	Scale(scale,scale)
	font.DrawText(text, x/scale, (y - centerYOption)/scale, centerXOption)
	SetMatrix(1,0,0,1,0,0)
	SetAlpha 1
End Function



'------------------------------------------------'
'------------------ Draw the HUD ----------------'
'------------------------------------------------'
Function DrawHUD(x:Int, y:Int, w:Int, h:Int, alpha:Float = 1)
	SetAlpha(alpha)
	SetBlend(AlphaBlend)
	Local widthContour:Int = 4
	'SetColor 0, 0, 200
	'SetColor 111, 170, 160
	SetColor 47, 47, 67
	DrawRect(x, y, w, h)
	'SetColor 0, 0, 250
	'SetColor 200, 190, 180
	SetColor 111, 134, 221
	DrawRect(x + widthContour, y + widthContour, w - widthContour*2, h - widthContour*2)
	SetColor 255, 255, 255
End Function



'------------------------------------------------'
'--------------- Create the halo ----------------'
'------------------------------------------------'
' This function is used once to create the halo and make a screen copy of it
Function CreateHalo()
	SetBlend 0
	SetAlpha 1
	For Local r:Int = 500 To 1 Step -1
		Local percent:Float = 1.0 - Float(r) / Float(300)
		If percent < 0.01  percent = 0.01
		Local color:Int = percent * 255
		SetColor color, color, color '* 1.2
		DrawCircle(DeviceWidth()/2, DeviceHeight()/2, r)
	Next
	SetColor 255, 255, 255
End Function